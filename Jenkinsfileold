pipeline {
    agent any

    environment {
	DOCKER_HUB_USER = 'joshuarakesh'
        DOCKER_DEV_REPO = 'joshuarakesh/dev-repo'
        DOCKER_PROD_REPO = 'joshuarakesh/prod-repo'
    }
    
    stages {
        stage('Show Token') {
            steps {
                script {
                    echo "GitHub Token: ${GITHUB_TOKEN}" // Will be masked in logs
                }
            }
        }

        
        stage('Checkout Code') {
            steps {
                git branch: 'dev', credentialsId: 'github-token', url: 'https://github.com/joshuarakesh/Reactjs-E-commerce-App.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def branch = env.GIT_BRANCH.replace('origin/', '')
                    if (branch == "dev") {
                        sh "docker build -t $DOCKER_HUB_USER/dev-repo:latest ."
                    } else if (branch == "master") {
                        sh "docker build -t $DOCKER_HUB_USER/prod-repo:latest ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def branch = env.GIT_BRANCH.replace('origin/', '')
                    withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_HUB_PASS')]) {
                        sh "echo $DOCKER_HUB_PASS | docker login -u $DOCKER_HUB_USER --password-stdin"
                        if (branch == "dev") {
                            sh "docker push $DOCKER_HUB_USER/dev-repo:latest"
                        } else if (branch == "master") {
                            sh "docker push $DOCKER_HUB_USER/prod-repo:latest"
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    def branch = env.GIT_BRANCH.replace('origin/', '')
                    if (branch == "dev") {
                        sh "docker run -d -p 80:80 --name react-app-dev $DOCKER_HUB_USER/dev-repo:latest"
                    } else if (branch == "master") {
                        sh "docker run -d -p 80:80 --name react-app-prod $DOCKER_HUB_USER/prod-repo:latest"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment Successful!"
        }
        failure {
            echo "Build Failed!"
        }
    }
}
